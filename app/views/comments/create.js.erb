function set_comment_form_target(message, commentable_type, commentable_id)
{
	$(".comments_textarea").val("");
    $("#comment_commentable_type").val(commentable_type);
    $("#comment_commentable_id").val(commentable_id);
}

function create_dom_element(element_string)
{
	var div = document.createElement('div');
	div.innerHTML = element_string;
	return div
}

// Show the element over 400 milliseconds after a 500 millisecond delay.
// This gives the tab_container to expand before inserting the new element.
function show(element)
{
	setTimeout(function(){$(element).fadeIn(400)},500);
}

// Show the element over 400 milliseconds after a 500 millisecond delay.
// This gives the tab_container to contract before hiding the element.
function hide(element)
{
	setTimeout(function(){$(element).fadeOut(400)},500);
}

// Show the element over 400 milliseconds after a 500 millisecond delay.
// This gives the tab_container to contract before removing the element.
function remove(element)
{
	hide($(element));
	setTimeout(function(){$(element).remove()},900);
}

function go_to(element)
{
	$('html, body').animate({
        scrollTop: $(element).offset().top + 'px'
    }, 'fast');
}

var tab_container = $("#tabs_container");
var height;

<% if @comment %>
	// Set the comment form to comment on the video again, not the commentable
	set_comment_form_target("", 'Video', <%= @comment.video.id %>);

    // Update the comments count in the tab title
    $(".comments_tab").children()[0].innerHTML = "Comments (<%= @comment.video.comments_count(true) %>)"

    // Create the comment element
	var comment = create_dom_element("<%= escape_javascript render @comment %>");

	<% if @comment.commentable.class.name == 'Comment' %>
		var comment = comment.getElementsByClassName("comment_reply")[0];
		var comment_container = $(".comment#<%=@comment.commentable.id%>")[0];
		$(comment_container).after(comment);
	// Otherwise, .appendChild it to the entire comment div.
	<% else %>
		var comment = comment.getElementsByClassName("comment")[0];
		var comment_container = $(".question_comments_outer")[0];
		comment_container.insertBefore(comment, comment_container.firstChild);
	<% end %>
	// Hide the comment so it can be shown after resizing the tab_container.
	$(comment).hide().addClass('new_comment_active_state');

	// Make sure the "No comments" message is gone.
	var no_comments_div = $(".no_questions_reply_wrapper")[0];
	var no_comments_message_height = $(no_comments_div).outerHeight(true);

	// Create success notification.
	var notification = create_dom_element("<%= escape_javascript render 'comments/success_notification' %>");

	// Store new height of tab_container.
	height =	tab_container.height() + 
				$(comment).outerHeight(true) - 
				$(no_comments_div).outerHeight(true);

	// Now let's scroll to the newly created comment.
	setTimeout(function()
	{
		go_to($(comment_container))
	}, 900);

<% else %>
	// Create error notification
	var notification = create_dom_element("<%= escape_javascript render 'comments/error_notification' %>");
<% end %>

// Insert the notification at the top of the tab_container
var notification_container = $("#tabs-2")[0];
$(notification).hide();
notification_container.insertBefore(notification, notification_container.firstChild);
var notification_wrapper = $(notification).children()[0];
var notification_inner = $(notification_wrapper).children()[0];
var notification_height = $(notification_inner).outerHeight(true);

// Add height of notification to new tab_container height.
height += notification_height;

// Apply the height change to the tab_container.
tab_container.height(height);

// Show/Hide appropriate elements.
remove($(no_comments_div));
show($(notification));
show($(comment));