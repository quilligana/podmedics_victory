function set_comment_form_target(message, commentable_type, commentable_id)
{
	$(".comments_textarea").val(message);
    $("#comment_commentable_type").val(commentable_type);
    $("#comment_commentable_id").val(commentable_id);
}

function create_dom_element(element_string)
{
	var div = document.createElement('div');
	div.innerHTML = element_string;
	return $(div).children()[0];
}

// Show the element over 400 milliseconds after a 500 millisecond delay.
// This gives the tab_container to expand before inserting the new element.
function show(element)
{
	setTimeout(function () { $(element).fadeIn(400)},500);
  	setTimeout(function () { $(comment).removeClass('new_comment_active_state');}, 2000);
}

// Show the element over 400 milliseconds after a 500 millisecond delay.
// This gives the tab_container to contract before hiding the element.
function hide(element)
{
	setTimeout(function(){$(element).fadeOut(400)},500);
}

// Show the element over 400 milliseconds after a 500 millisecond delay.
// This gives the tab_container to contract before removing the element.
function remove(element)
{
	hide($(element));
	setTimeout(function(){$(element).remove()},900);
}

function go_to(element)
{
	$('html, body').animate({
        scrollTop: $(element).offset().top - 2 + 'px'
    }, 'fast');
}

function update_comment_count(page, count)
{
	if(page == "Video")
	{
    	$(".comments_tab").children()[0].innerHTML = "Comments/Questions (" + count + ")"
	}
    else
    {
    	$(".comments_tab").children()[0].innerHTML = count + " Answers"
    }
}

var tab_container = $("#tabs_container");
var height;

<%

if @comment
	comment_root_type = @comment.root_type
	comment_root_id = @comment.root_id

	comment_count = @comment.root.cached_comments_count

	comment_parent_type = @comment.commentable.class.name


	if comment_parent_type == "Comment"

		comment_grandparent_type = @comment.commentable.commentable.class.name 

		if comment_grandparent_type == 'Comment'
			comment_class_string = ".comment_reply"
		else
			comment_class_string = ".comment"
		end

		comment_container_string = "#{comment_class_string}##{@comment.commentable.id}"
	end
end

%>

<% if @comment %>

	// Set the comment form to comment on the root again, not the commentable
	set_comment_form_target("", "<%= comment_root_type %>", <%= comment_root_id %>);

	// Hide the box telling the user who they're replying to
    $("#reply_cancel_box").hide(100);

    // Update the count of the comments
    update_comment_count("<%= comment_root_type %>", <%= comment_count %>); 

    // Create the comment element
	var comment = create_dom_element("<%= escape_javascript render partial: 'comment', object: @comment %>");

	<% if comment_parent_type == 'Comment' %>

		// Get the comment we're inserting the comment after
		var comment_container = $("<%= comment_container_string %>")[0];

		// Insert the comment into the page
		$(comment).insertAfter($(comment_container));

		// Store where we're going to focus the page
		var focus_div = comment_container;

	<% else %>

		// Get the comments container.
		var comment_container = $(".question_comments_outer")[0];

		// Insert the comment at the top of the comments list.
		comment_container.insertBefore(comment, comment_container.firstChild);

		// Store where we're going to focus the page.
		var focus_div = comment;

	<% end %>

	// Focus the page on the comment in 900 milliseconds (after all the animations have inserted the comment)
	setTimeout(function() { go_to($(focus_div)) }, 900);

	// Hide the comment and highlight it.
	$(comment).hide().addClass('new_comment_active_state');

	// Get the div telling the user there are no comments.
	var no_comments_div = $(".no_questions_reply_wrapper")[0];

	// Calculate the new height of the comments container
	height =	tab_container.height() + 
				$(comment).outerHeight(true) - 
				$(no_comments_div).outerHeight(true);

<% else %>

	// Create error notification
	var notification = create_dom_element("<%= escape_javascript render 'comments/error_notification' %>");

	// Insert the notification at the top of the tab_container
	var notification_container = $("#tabs-2")[0];
	$(notification).hide();
	notification_container.insertBefore(notification, notification_container.firstChild);

	// Get height of notification
	var notification_wrapper = $(notification).children()[0];
	var notification_inner = $(notification_wrapper).children()[0];

	// Add height of notification to new tab_container height.
	height += $(notification_inner).outerHeight(true);

	show($(notification));

<% end %>


// Apply the height change to the tab_container.
tab_container.height(height);

// Show/Hide appropriate elements.
remove($(no_comments_div));
show($(comment));
