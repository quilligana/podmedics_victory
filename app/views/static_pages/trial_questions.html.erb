<style type="text/css" media="screen">
  ul.showAnswer li.correct {
    background-color: green;
  }
  ul.showAnswer li.incorrect {
    background-color: red;
  }
</style>

<div class="inner">
  <div class="sub_heading_wrapper">
    <h1>Trial Questions</h1>
    <p>Feel free to try out some of the questions from our great bank.</p>
  </div>

  <div class="page">

    <div ng-app='TrialQuestionsApp'>
      <div ng-controller='TrialQuestionsController as vm'>
        <div class="question" ng-show="vm.firstQuestionAvailable">
          <div ng-bind-html="vm.currentQuestion.stem"></div>

          <ul ng-class="{ 'showAnswer' : vm.showAnswer }">
            <li ng-repeat="answer in vm.currentQuestion.answers" ng-class="{ 'correct' : vm.isCorrect(answer), 'incorrect' : answer.selectedAndIncorrect }">
              <a ng-click="vm.selectedAnswer(answer)">{{answer.text}}</a>
            </li>
          </ul>

          <div class="answer" ng-show="vm.showAnswer">
            <div ng-bind-html="vm.currentQuestion.explanation"></div>
            <a ng-click="vm.nextQuestion()">Next Question</a>
          </div>
        </div>

        <div class="end_questions" ng-show="vm.questionsEnded">
          <p>You have finished all the trial questions.</p>
          <p><%= link_to "Sign Up to access more", signup_path %></p>
          <p><a ng-click="vm.startAgain()">Start again</a></p>
        </div>
      </div><!-- end ng-controller -->
    </div><!-- end ng-app -->
  </div>
</div>



<script type="text/javascript">
  (function(){
    angular.module('TrialQuestionsApp', ['ngSanitize']);

    // questions factory
    angular.module('TrialQuestionsApp').factory('DataService', DataService);

      function DataService($q, $http){

        function getQuestions() {
          var deferred = $q.defer();

          $http({method: 'GET', url: 'api/v1/questions/sample'})
            .success(function(data){
              deferred.resolve(data);
            })
            .error(function(data, status, headers, config){
              deferred.reject('Sorry, questions are not available at the moment');
            });

          return deferred.promise;
        }

        return {
          getQuestions: getQuestions
        }
    }

    angular.module('TrialQuestionsApp').factory('Quiz', Quiz);

    function Quiz (DataService, $q) {
      var model = this;
      model.currentIndex = 0;
      model.questionNumber = 10;
      model.availableQuestions = []; //we need to populate this from API

      function createNewQuiz() {
        var deferred = $q.defer();

        DataService.getQuestions().then(function(data){
          model.availableQuestions = data;
          deferred.resolve(model);
        }, function(reason) {
          console.log('createNew quizcalled with bad response')
          deferred.reject(reason);
        })

        return deferred.promise;
      }

      function currentQuestion(increment) {
        // get the question
        var question = model.availableQuestions[model.currentIndex];

        // prepare the question answers
        question.answers = [];
        question.answers.push({text: question.answer_1, index: 1});
        question.answers.push({text: question.answer_2, index: 2});
        if (question.answer_3 !== null && question.answer_3.length > 0 ) {
          question.answers.push({text: question.answer_3, index: 3});
        }
        if (question.answer_4 !== null && question.answer_4.length > 0) {
          question.answers.push({text: question.answer_4, index: 4});
        }
        if (question.answer_5 !== null && question.answer_5.length > 0) {
          question.answers.push({text: question.answer_5, index: 5});
        }

        // return the question
        return question;
      }

      function lastQuestion() {
        return model.currentIndex == (model.questionNumber - 1)
      }

      function incrementIndex() {
        model.currentIndex += 1;
      }

      function restart() {
        model.currentIndex = 0;
      }

      return {
        createNewQuiz: createNewQuiz,
        currentQuestion: currentQuestion,
        lastQuestion: lastQuestion,
        incrementIndex: incrementIndex,
        restart: restart
      }
    };

    angular.module('TrialQuestionsApp').controller('TrialQuestionsController', TrialQuestionsController);

      // logic for questions
      function TrialQuestionsController($scope, Quiz){
        var vm = this;
        vm.firstQuestionAvailable = false;
        vm.showAnswer = false;
        vm.questionsEnded = false;

        activate();

        function activate() {
          Quiz.createNewQuiz().then(function(quiz){
            vm.currentQuestion = Quiz.currentQuestion();
            vm.firstQuestionAvailable = true;
          }, function(reason) {
            alert(reason);
          })
        }

        vm.selectedAnswer = function(answer){
          answer.selectedAndIncorrect = answer.index != vm.currentQuestion.correct_answer;
          vm.showAnswer = true;
        }

        vm.nextQuestion = function() {
          if (Quiz.lastQuestion()) {
            // hide the questions and show the questions ended copy
            vm.firstQuestionAvailable = false;
            vm.questionsEnded = true;
          } else {
            // reset the currentQuestion to the next one in the availableQuestions
            Quiz.incrementIndex();
            vm.currentQuestion = Quiz.currentQuestion();
            vm.showAnswer = false;
          }
        }

        vm.isCorrect = function(answer) {
          if (answer.index == vm.currentQuestion.correct_answer) {
            return true;
          } else {
            return false;
          }
        }

        vm.startAgain = function(){
          Quiz.restart();
          vm.currentQuestion = Quiz.currentQuestion();

          vm.showAnswer = false;
          vm.questionsEnded = false
          vm.firstQuestionAvailable = true;
        }

    }
  })();

</script>